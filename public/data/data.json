{
  "quizzes": [
    {
      "title": "HTML",
      "questions": [
        {
          "question": "What is the difference between block-level and inline-level elements?",
          "options": [
            "Block elements take up full width, inline take only necessary width.",
            "Inline elements take up full width, block take only necessary width.",
            "Block elements are for text, inline for images.",
            "No difference between block and inline elements."
          ],
          "answer": "Block elements take up full width, inline take only necessary width."
        },
        {
          "question": "How do you optimize an HTML document for performance?",
          "options": [
            "Minimize inline styles, compress images, defer non-essential resources.",
            "Increase the number of HTML elements.",
            "Use as many inline styles as possible.",
            "Avoid external stylesheets and scripts."
          ],
          "answer": "Minimize inline styles, compress images, defer non-essential resources."
        },
        {
          "question": "What is 'progressive enhancement'?",
          "options": [
            "Design that emphasizes core content, adding features for capable browsers.",
            "Technique to progressively load content as you scroll.",
            "Enhancing content with animations and graphics.",
            "Strategy to replace old technologies with new ones."
          ],
          "answer": "Design that emphasizes core content, adding features for capable browsers."
        },
        {
          "question": "What is the purpose of the 'defer' attribute in a script tag?",
          "options": [
            "Executes script after HTML is fully parsed.",
            "Executes script before HTML is parsed.",
            "Blocks loading of a script.",
            "Loads the script asynchronously."
          ],
          "answer": "Executes script after HTML is fully parsed."
        },
        {
          "question": "How do you ensure your HTML is accessible?",
          "options": [
            "Use semantic elements, provide text alternatives, ensure keyboard access.",
            "Avoid images and multimedia content.",
            "Minimize use of CSS and JavaScript.",
            "Ensure website works on modern browsers only."
          ],
          "answer": "Use semantic elements, provide text alternatives, ensure keyboard access."
        },
        {
          "question": "What is the difference between 'canvas' and 'svg'?",
          "options": [
            "'canvas' is bitmap-based, 'svg' is vector-based.",
            "'svg' is bitmap-based, 'canvas' is vector-based.",
            "'canvas' is for static images, 'svg' for dynamic content.",
            "'svg' is deprecated in favor of 'canvas'."
          ],
          "answer": "'canvas' is bitmap-based, 'svg' is vector-based."
        },
        {
          "question": "What does the 'meta' charset='UTF-8' tag do?",
          "options": [
            "Specifies character encoding for proper display of text.",
            "Defines the language of the document.",
            "Links the document to an external stylesheet.",
            "Provides metadata for search engines."
          ],
          "answer": "Specifies character encoding for proper display of text."
        },
        {
          "question": "How does the 'picture' element help in responsive design?",
          "options": [
            "Allows browser to choose the best image based on screen size.",
            "Automatically compresses images.",
            "Displays videos instead of images.",
            "'picture' element is deprecated."
          ],
          "answer": "Allows browser to choose the best image based on screen size."
        },
        {
          "question": "What are the benefits of using HTML5?",
          "options": [
            "New semantic elements, multimedia support, improved forms, offline APIs.",
            "Removes all deprecated tags.",
            "Designed specifically for mobile devices.",
            "Reduces the need for CSS and JavaScript."
          ],
          "answer": "New semantic elements, multimedia support, improved forms, offline APIs."
        },
        {
          "question": "What is the 'role' of 'aria-describedby'?",
          "options": [
            "Associates an element with a description, improving accessibility.",
            "Provides a summary of the content.",
            "Defines the language of the content.",
            "Hides content from screen readers."
          ],
          "answer": "Associates an element with a description, improving accessibility."
        }
      ]
    },
    {
      "title": "CSS",
      "questions": [
        {
          "question": "What's the difference between 'flexbox' and 'CSS grid'?",
          "options": [
            "'flexbox' is one-dimensional, 'CSS grid' is two-dimensional.",
            "'CSS grid' is one-dimensional, 'flexbox' is two-dimensional.",
            "'flexbox' is for grids, 'CSS grid' for rows.",
            "'CSS grid' is deprecated."
          ],
          "answer": "'flexbox' is one-dimensional, 'CSS grid' is two-dimensional."
        },
        {
          "question": "How does 'z-index' work?",
          "options": [
            "Determines stack order of overlapping elements.",
            "Adjusts transparency of an element.",
            "Applies only to inline elements.",
            "Used to adjust font size."
          ],
          "answer": "Determines stack order of overlapping elements."
        },
        {
          "question": "What is the 'box model'?",
          "options": [
            "Represents structure of a page: margins, borders, padding, content.",
            "Method for creating animations.",
            "Defines font size.",
            "Applies only to inline elements."
          ],
          "answer": "Represents structure of a page: margins, borders, padding, content."
        },
        {
          "question": "How do transitions differ from animations?",
          "options": [
            "Transitions occur on property change, animations change multiple properties over time.",
            "Transitions are for moving elements, animations are for colors.",
            "Transitions are triggered by JavaScript.",
            "Transitions are available only in modern browsers."
          ],
          "answer": "Transitions occur on property change, animations change multiple properties over time."
        },
        {
          "question": "What's the difference between 'position: absolute' and 'position: fixed'?",
          "options": [
            "'absolute' is relative to nearest positioned ancestor, 'fixed' to the viewport.",
            "'fixed' is deprecated.",
            "'absolute' is for static, 'fixed' for moving elements.",
            "Both are the same."
          ],
          "answer": "'absolute' is relative to nearest positioned ancestor, 'fixed' to the viewport."
        },
        {
          "question": "How do you achieve responsive web design?",
          "options": [
            "Use media queries, flexible grids, responsive images.",
            "Create different HTML files for each device.",
            "Use only inline styles.",
            "Avoid CSS altogether."
          ],
          "answer": "Use media queries, flexible grids, responsive images."
        },
        {
          "question": "What is a CSS preprocessor?",
          "options": [
            "A scripting language that extends CSS with variables, nesting, mixins.",
            "A tool to minify CSS files.",
            "Converts CSS into JavaScript.",
            "Creates animations in CSS."
          ],
          "answer": "A scripting language that extends CSS with variables, nesting, mixins."
        },
        {
          "question": "How does CSS specificity work?",
          "options": [
            "Specificity determines which rule is applied based on selector weight.",
            "Defines font size.",
            "Creates animations.",
            "Irrelevant in modern CSS."
          ],
          "answer": "Specificity determines which rule is applied based on selector weight."
        },
        {
          "question": "What is the 'calc()' function?",
          "options": [
            "Allows calculations to determine property values.",
            "Creates animations.",
            "Defines colors.",
            "Sets z-index."
          ],
          "answer": "Allows calculations to determine property values."
        },
        {
          "question": "What is 'CSS specificity hierarchy'?",
          "options": [
            "Hierarchy determined by selector type; conflicts resolved by specificity value and rule order.",
            "Determined by CSS file size.",
            "Determined by the browser.",
            "Irrelevant in modern CSS."
          ],
          "answer": "Hierarchy determined by selector type; conflicts resolved by specificity value and rule order."
        }
      ]
    },
    {
      "title": "JavaScript",
      "questions": [
        {
          "question": "What is the difference between 'null' and 'undefined'?",
          "options": [
            "'undefined' is a declared variable with no value, 'null' is an assignment for no value.",
            "'null' is for undefined variables, 'undefined' for null values.",
            "Both are the same.",
            "'undefined' is only in ES6+."
          ],
          "answer": "'undefined' is a declared variable with no value, 'null' is an assignment for no value."
        },
        {
          "question": "Difference between function expressions and declarations?",
          "options": [
            "Declarations are hoisted, expressions are not.",
            "Expressions are hoisted, declarations are not.",
            "No difference between the two.",
            "Declarations only used in objects."
          ],
          "answer": "Declarations are hoisted, expressions are not."
        },
        {
          "question": "Difference between '==' and '==='?",
          "options": [
            "'==' checks value with type coercion, '===' checks value and type without coercion.",
            "'===' checks value, '==' checks value and type.",
            "Both are the same.",
            "'===' is for strings, '==' is for numbers."
          ],
          "answer": "'==' checks value with type coercion, '===' checks value and type without coercion."
        },
        {
          "question": "What is prototypal inheritance?",
          "options": [
            "Allows objects to inherit properties from other objects.",
            "Defines classes in JavaScript.",
            "Handles asynchronous code.",
            "Manages state in JavaScript."
          ],
          "answer": "Allows objects to inherit properties from other objects."
        },
        {
          "question": "How does 'this' differ in arrow functions and regular functions?",
          "options": [
            "Arrow functions: 'this' is lexically bound; Regular functions: 'this' is dynamically bound.",
            "'this' is the same in both.",
            "'this' in arrow functions refers to the global object.",
            "'this' in regular functions is bound to the parent object."
          ],
          "answer": "Arrow functions: 'this' is lexically bound; Regular functions: 'this' is dynamically bound."
        },
        {
          "question": "Explain closures in JavaScript.",
          "options": [
            "A function that remembers the environment in which it was created.",
            "A method to close functions after execution.",
            "Used to manage memory.",
            "Deprecated feature in modern JavaScript."
          ],
          "answer": "A function that remembers the environment in which it was created."
        },
        {
          "question": "Difference between 'call', 'apply', and 'bind'?",
          "options": [
            "'call' and 'apply' invoke with a specific 'this', 'bind' returns a new function with bound 'this'.",
            "'call' is for synchronous functions, 'apply' for asynchronous, 'bind' for binding events.",
            "All are interchangeable.",
            "'apply' and 'bind' are deprecated."
          ],
          "answer": "'call' and 'apply' invoke with a specific 'this', 'bind' returns a new function with bound 'this'."
        },
        {
          "question": "How do JavaScript classes differ from functions in inheritance?",
          "options": [
            "Classes provide simpler syntax for inheritance compared to functions using prototypal inheritance.",
            "Classes do not support inheritance, functions do.",
            "Classes are syntactic sugar over functions.",
            "Functions are for methods, classes are for objects."
          ],
          "answer": "Classes provide simpler syntax for inheritance compared to functions using prototypal inheritance."
        },
        {
          "question": "Explain 'pass by value' vs 'pass by reference'.",
          "options": [
            "Primitives are passed by value, objects by reference.",
            "Everything in JavaScript is passed by reference.",
            "Everything in JavaScript is passed by value.",
            "Only arrays are passed by reference."
          ],
          "answer": "Primitives are passed by value, objects by reference."
        },
        {
          "question": "Check if a string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward",
          "options": [
            "function isPalindrome(str) { return str === str.split('').reverse().join(''); }",
            "function isPalindrome(str) { return str.sort(); }",
            "function isPalindrome(str) { return str.split('').reverse().sort(); }",
            "function isPalindrome(str) { return str.reverse(); }"
          ],
          "answer": "function isPalindrome(str) { return str === str.split('').reverse().join(''); }"
        }
      ]
    },
    {
      "title": "React",
      "questions": [
        {
          "question": "What are hooks in React?",
          "options": [
            "Hooks allow state and other features in functional components.",
            "Hooks handle events in components.",
            "Hooks replace props.",
            "Hooks optimize performance."
          ],
          "answer": "Hooks allow state and other features in functional components."
        },
        {
          "question": "What is a custom hook?",
          "options": [
            "Reusable function with stateful logic, created by prefixing a function name with 'use'.",
            "A new type of React component.",
            "A way to handle props.",
            "Used to create context."
          ],
          "answer": "Reusable function with stateful logic, created by prefixing a function name with 'use'."
        },
        {
          "question": "How do you manage global state with Context API?",
          "options": [
            "Create context with React.createContext(), provide it at the top level, consume it with useContext.",
            "Pass state as props to every component.",
            "Use local state in each component.",
            "Create multiple Redux stores."
          ],
          "answer": "Create context with React.createContext(), provide it at the top level, consume it with useContext."
        },
        {
          "question": "How do you handle side effects using React hooks?",
          "options": [
            "Use useEffect for side effects like data fetching, subscriptions.",
            "Use useState hook.",
            "Use class components and componentDidMount.",
            "Use props and state."
          ],
          "answer": "Use useEffect for side effects like data fetching, subscriptions."
        },
        {
          "question": "What is the purpose of 'useMemo'?",
          "options": [
            "Memoizes expensive calculations, re-computing only when dependencies change.",
            "Stores state between renders.",
            "Creates event listeners.",
            "Optimizes CSS in React."
          ],
          "answer": "Memoizes expensive calculations, re-computing only when dependencies change."
        },
        {
          "question": "How to implement lazy loading in React?",
          "options": [
            "Use React.lazy() to dynamically import components and Suspense for fallback.",
            "Delay rendering components until needed.",
            "Use useEffect hook.",
            "Lazy loading is not possible in React."
          ],
          "answer": "Use React.lazy() to dynamically import components and Suspense for fallback."
        },
        {
          "question": "How do you manage loading states?",
          "options": [
            "Set up loading state and update it before and after async operations.",
            "Use useEffect hook exclusively.",
            "Use class components and componentDidMount.",
            "Use props and context."
          ],
          "answer": "Set up loading state and update it before and after async operations."
        },
        {
          "question": "What is the purpose of 'useReducer' and how is it different from 'useState'?",
          "options": [
            "useReducer is for complex state logic involving sub-values or state dependencies, while useState is for simpler state.",
            "useReducer is for global state, useState is for local state.",
            "useReducer handles side effects, useState stores state.",
            "useReducer is deprecated."
          ],
          "answer": "useReducer is for complex state logic involving sub-values or state dependencies, while useState is for simpler state."
        },
        {
          "question": "What's the difference between controlled and uncontrolled components?",
          "options": [
            "Controlled components have state managed by React, uncontrolled handle state internally with refs.",
            "Uncontrolled components have no state.",
            "Controlled components have no state.",
            "No difference between the two."
          ],
          "answer": "Controlled components have state managed by React, uncontrolled handle state internally with refs."
        },
        {
          "question": "How do you implement a debounce function in React?",
          "options": [
            "Delays function execution until a certain time has passed since last call, implemented with setTimeout and useEffect.",
            "Executes function immediately after event.",
            "Handles CSS in React.",
            "Creates context in React."
          ],
          "answer": "Delays function execution until a certain time has passed since last call, implemented with setTimeout and useEffect."
        }
      ]
    },
    {
      "title": "MySQL",
      "questions": [
        {
          "question": "What is an index in MySQL?",
          "options": [
            "A data structure that speeds up data retrieval.",
            "A key used to join tables.",
            "A method for encrypting data.",
            "A unique identifier for each row."
          ],
          "answer": "A data structure that speeds up data retrieval."
        },
        {
          "question": "Difference between a primary key and a foreign key?",
          "options": [
            "Primary key uniquely identifies rows, foreign key links to primary key in another table.",
            "Foreign key uniquely identifies rows, primary key links tables.",
            "Both are the same.",
            "Primary key is for indexing, foreign key is for sorting."
          ],
          "answer": "Primary key uniquely identifies rows, foreign key links to primary key in another table."
        },
        {
          "question": "Difference between INNER JOIN, LEFT JOIN, and RIGHT JOIN?",
          "options": [
            "INNER JOIN returns matching rows, LEFT JOIN returns all left table rows, RIGHT JOIN returns all right table rows.",
            "INNER JOIN returns all rows, LEFT JOIN returns matching left rows, RIGHT JOIN returns matching right rows.",
            "INNER JOIN for inner tables, LEFT JOIN for left tables, RIGHT JOIN for right tables.",
            "No difference between them."
          ],
          "answer": "INNER JOIN returns matching rows, LEFT JOIN returns all left table rows, RIGHT JOIN returns all right table rows."
        },
        {
          "question": "Types of indexes in MySQL?",
          "options": [
            "Primary, unique, full-text, composite.",
            "Primary, full-text, JSON, numeric.",
            "Full-text, numeric, string.",
            "Primary, foreign, secondary."
          ],
          "answer": "Primary, unique, full-text, composite."
        },
        {
          "question": "Purpose of the EXPLAIN statement?",
          "options": [
            "Provides information on query execution to optimize performance.",
            "Creates indexes.",
            "Executes SQL queries.",
            "Displays table structure."
          ],
          "answer": "Provides information on query execution to optimize performance."
        },
        {
          "question": "What is a composite key?",
          "options": [
            "A primary key with two or more columns to uniquely identify a row.",
            "A key with multiple foreign keys.",
            "Used for indexing multiple columns.",
            "Creates joins between tables."
          ],
          "answer": "A primary key with two or more columns to uniquely identify a row."
        },
        {
          "question": "How does MySQL handle transactions?",
          "options": [
            "Ensures a series of operations complete successfully, adhering to ACID properties.",
            "Creates temporary tables for each operation.",
            "Does not support transactions.",
            "ACID properties are for NoSQL databases."
          ],
          "answer": "Ensures a series of operations complete successfully, adhering to ACID properties."
        },
        {
          "question": "Difference between clustered and non-clustered indexes?",
          "options": [
            "Clustered index determines physical order of data, non-clustered points to physical data.",
            "Non-clustered determines physical order, clustered is for sorting.",
            "No difference between them.",
            "Clustered indexes are for full-text search."
          ],
          "answer": "Clustered index determines physical order of data, non-clustered points to physical data."
        },
        {
          "question": "What is normalization and its forms?",
          "options": [
            "Organizes data to minimize redundancy and ensure integrity: 1NF, 2NF, 3NF, BCNF.",
            "Method for compressing data.",
            "Used to link multiple tables.",
            "Only for indexing."
          ],
          "answer": "Organizes data to minimize redundancy and ensure integrity: 1NF, 2NF, 3NF, BCNF."
        },
        {
          "question": "What are stored procedures and how do they differ from functions?",
          "options": [
            "Reusable SQL code blocks that can perform multiple operations, functions return a single value.",
            "Stored procedures are for indexing, functions are for sorting.",
            "Stored procedures create joins, functions index data.",
            "Stored procedures are deprecated."
          ],
          "answer": "Reusable SQL code blocks that can perform multiple operations, functions return a single value."
        }
      ]
    }
  ]
}
